@page "/"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<PageTitle>Chat Message</PageTitle>
<h3>Chat</h3>

@if(!IsConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="What's your name?" >
        <button class="btn btn-primary form-control-append" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <textarea style="width: 100%; height: 500px; " >
        @messages
    </textarea>   
    <div class="input-group">
        <input @bind-value="message"
               @bind-value:event="oninput">
               @onkeyup="HandleInput"
               class="form-control"
        <button class="btn btn-primary form-group-append"
        @onclick="Send"
        disabled="@(!IsConnected)"> Send</button>
    </div>
}

@code {
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;
    ElementReference TextAreaRef

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}")).Build();

        hubConnection.On<string, string>("GetThatMessage", (user,message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user+ ": ")} {message}";
            messages += msg + "\n";
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }
    public async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("SendMessage");
        }
    }

    public async Task HandleInput(KeyboardEventArgs args)
    {
        if(args.Key == null || args.Key.Equals("Enter"))
        {
            await Send();
        }
    }

    public bool IsConnected => hubConnection?>State == HucConnectionState.Connected;

    public async ValueTask DisponseAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }




}